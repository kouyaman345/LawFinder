// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Law {
  id                String    @id
  title             String
  lawType           String?
  lawNumber         String?
  promulgationDate  DateTime?
  effectiveDate     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  articles          Article[]
  metadata          Json?
  enactStatements   Json?
  amendmentHistory  Json?
  
  @@index([title])
  @@index([lawNumber])
}

model Article {
  id                String    @id @default(uuid())
  lawId             String
  articleNumber     String
  articleTitle      String?
  content           String
  part              String?   // 編
  chapter           String?   // 章
  section           String?   // 節
  subsection        String?   // 款
  division          String?   // 目
  
  law               Law       @relation(fields: [lawId], references: [id], onDelete: Cascade)
  paragraphs        Paragraph[]
  referencesFrom    Reference[] @relation("FromArticle")
  referencesTo      Reference[] @relation("ToArticle")
  
  @@unique([lawId, articleNumber])
  @@index([lawId])
}

model Paragraph {
  id                String    @id @default(uuid())
  articleId         String
  paragraphNumber   Int
  content           String
  
  article           Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  items             Item[]
  
  @@unique([articleId, paragraphNumber])
  @@index([articleId])
}

model Item {
  id                String    @id @default(uuid())
  paragraphId       String
  itemNumber        String
  content           String
  
  paragraph         Paragraph @relation(fields: [paragraphId], references: [id], onDelete: Cascade)
  
  @@unique([paragraphId, itemNumber])
  @@index([paragraphId])
}

model Reference {
  id                String    @id @default(uuid())
  fromArticleId     String
  toArticleId       String?
  toLawId           String?
  referenceText     String
  referenceType     String    // internal, external, relative, complex, structural, application
  referenceSubType  String?   // range, multiple, with_paragraph, with_item, chapter, part, section, item_list
  
  // 詳細な参照情報
  targetArticleNumber     String?
  targetArticleNumberEnd  String?  // 範囲参照の終点
  targetParagraphNumber   Int?
  targetItemNumber        String?
  targetLawName           String?
  
  // 相対参照情報
  relativeDirection       String?  // previous, next, same
  relativeCount           Int?
  structureType           String?  // 章, 編, 節, 款, 目
  
  // コンテキスト情報
  sourceParagraphNumber   Int?
  sourceItemNumber        String?
  
  confidence        Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  fromArticle       Article   @relation("FromArticle", fields: [fromArticleId], references: [id], onDelete: Cascade)
  toArticle         Article?  @relation("ToArticle", fields: [toArticleId], references: [id], onDelete: Cascade)
  
  @@index([fromArticleId])
  @@index([toArticleId])
  @@index([toLawId])
  @@index([referenceType])
  @@index([referenceSubType])
}
