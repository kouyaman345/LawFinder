generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LawMaster {
  id               String       @id
  title            String
  lawType          String?
  lawNumber        String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  currentVersionId String?      @unique
  currentVersion   LawVersion?  @relation("CurrentVersion", fields: [currentVersionId], references: [id])
  versions         LawVersion[]

  @@index([title])
  @@index([lawNumber])
}

model LawVersion {
  id               String     @id
  lawId            String
  versionDate      DateTime
  promulgationDate DateTime?
  amendmentLawId   String?
  amendmentDate    DateTime?
  xmlContent       String
  status           String     @default("現行")
  isLatest         Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  articles         Article[]
  currentFor       LawMaster? @relation("CurrentVersion")
  lawMaster        LawMaster  @relation(fields: [lawId], references: [id], onDelete: Cascade)

  @@unique([lawId, versionDate])
  @@index([lawId, isLatest])
  @@index([versionDate])
  @@index([status])
}

model Article {
  id            String      @id @default(uuid())
  versionId     String
  articleNumber String
  articleTitle  String?
  content       String
  part          String?
  chapter       String?
  section       String?
  subsection    String?
  division      String?
  sortOrder     Int         @default(0)
  isDeleted     Boolean     @default(false)
  version       LawVersion  @relation(fields: [versionId], references: [id], onDelete: Cascade)
  paragraphs    Paragraph[]

  @@unique([versionId, articleNumber])
  @@index([versionId, sortOrder])
}

model Paragraph {
  id              String  @id @default(uuid())
  articleId       String
  paragraphNumber Int
  content         String
  items           Item[]
  article         Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([articleId, paragraphNumber])
}

model Item {
  id          String    @id @default(uuid())
  paragraphId String
  itemNumber  String
  content     String
  paragraph   Paragraph @relation(fields: [paragraphId], references: [id], onDelete: Cascade)

  @@unique([paragraphId, itemNumber])
}

model Reference {
  id               String    @id @default(uuid())
  sourceVersionId  String
  sourceLawId      String
  sourceArticle    String
  targetVersionId  String?
  targetLawId      String?
  targetArticle    String?
  referenceType    String
  referenceText    String
  confidence       Float     @default(1.0)
  metadata         Json?
  detectionMethod  String    @default("forward")
  requiresLLMCheck Boolean   @default(false)
  llmCheckResult   Json?
  llmCheckedAt     DateTime?
  isAmbiguous      Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([sourceVersionId, sourceArticle])
  @@index([sourceLawId])
  @@index([targetVersionId, targetArticle])
  @@index([targetLawId])
  @@index([referenceType])
  @@index([requiresLLMCheck])
  @@index([detectionMethod])
}

model AmendmentRelation {
  id                String   @id @default(uuid())
  originalVersionId String
  amendedVersionId  String
  amendmentLawId    String
  amendmentDate     DateTime
  changeType        String
  changeSummary     String?
  createdAt         DateTime @default(now())

  @@index([originalVersionId])
  @@index([amendedVersionId])
  @@index([amendmentLawId])
}
